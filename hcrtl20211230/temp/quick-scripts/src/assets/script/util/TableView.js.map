{"version":3,"sources":["assets\\script\\util\\TableView.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\r\n * 翻译的 cocos2dx cc.TableView\r\n * 注意：\r\n *      1. cell 的锚点是 0.5, 0.5\r\n *      2. 只支持垂直滚动或水平滚动，不支持双向滚动\r\n * 函数：\r\n *      设置单元格间距的 setInterval(0, 0, 0)\r\n *      重新加载数据 reloadData(false)            添加参数(isUseLastOffset:是否使用上一次的容器偏移量)\r\n *      查找索引处的单元格 cellAtIndex(0)\r\n *      更新索引处的单元格 updateCellAtIndex(0)\r\n *      滚动到索引处的单元格 scrollToIndex(0)\r\n * 未实现：\r\n *      指定索引处插入新单元格 insertCellAtIndex\r\n *      删除指定索引处的单元格 removeCellAtIndex\r\n * 用法：\r\n *      import TableView, {TableViewCellNode} from \"./TableView\";\r\n *      export default class Helloworld extends cc.Component {\r\n *          tableData: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n *          @property({type: TableView})\r\n *          tableView: TableView = null;\r\n *          start() {\r\n *              this.tableView.reloadData();\r\n *          }\r\n *          tableCellCount(): number {\r\n *              return this.tableData.length;\r\n *          }\r\n *          tableCellSize(idx: number): cc.Size {\r\n *              return cc.size(300, 100);// 通过idx可为每个cell设置单独size\r\n *          }\r\n *          tableCellUpdate(idx: number, cell: TableViewCellNode) {\r\n *              cc.log(\"idx = \" + idx, \"data = \" + this.tableData[idx]);\r\n *          }\r\n *      }\r\n */\r\nconst {ccclass, property, requireComponent, menu} = cc._decorator;\r\nconst CC_INVALID_INDEX: number = -1;\r\nexport enum VerticalFillOrder {TOP_DOWN = 0, BOTTOM_UP = 1}\r\n\r\n@ccclass\r\nexport class TableViewCellNode extends cc.Node {\r\n    private _idx: number = CC_INVALID_INDEX;\r\n    public getIdx = (): number => this._idx;\r\n    public setIdx = (idx: number) => this._idx = idx;\r\n    public reset = () => this._idx = CC_INVALID_INDEX;\r\n}\r\n\r\n@ccclass\r\n@menu(\"Extend/TableView\")\r\n@requireComponent(cc.ScrollView)\r\nexport default class TableView extends cc.Component {\r\n    private scrollView: cc.ScrollView = null;\r\n\r\n    @property({type: cc.Node, tooltip: \"裁剪节点\"})\r\n    private maskNode: cc.Node = null\r\n\r\n    @property({type: cc.Enum(VerticalFillOrder), tooltip: \"单元格垂直填充顺序\"})\r\n    private vordering: VerticalFillOrder = VerticalFillOrder.TOP_DOWN;\r\n\r\n    @property({type: cc.Integer, tooltip: \"第一个单元格和边框的间隔\"})\r\n    private starInterval: number = 0;\r\n    @property({type: cc.Integer, tooltip: \"单元格之间的间隔\"})\r\n    private midInterval: number = 0;\r\n    @property({type: cc.Integer, tooltip: \"最后一个单元格和边框的间隔\"})\r\n    private endInterval: number = 0;\r\n\r\n    @property({type: cc.Component.EventHandler, tooltip: \"单元格的数量\\n函数形参 () => number\"})\r\n    private handlerCellCount: cc.Component.EventHandler = new cc.Component.EventHandler();\r\n\r\n    @property({type: cc.Component.EventHandler, tooltip: \"单元格的大小\\n函数形参 (idx: number) => cc.Size\"})\r\n    private handlerCellSize: cc.Component.EventHandler = new cc.Component.EventHandler();\r\n\r\n    @property({type: cc.Component.EventHandler, tooltip: \"更新单元格\\n函数形参 (idx: number, cell: TableViewCellNode) => void\"})\r\n    private handlerCellUpdate: cc.Component.EventHandler = new cc.Component.EventHandler();\r\n\r\n    private tableCellCount: () => number = null;                                         //单元格数量获取函数\r\n    private tableCellSize: (idx: number) => cc.Size = null;                              //索引的单元格大小获取函数\r\n    private tableCellUpdate: (idx: number, cell: TableViewCellNode) => void = null;      //索引的单元格更新回调函数\r\n\r\n    private _indices: boolean[] = [];                                       //索引集用于查询所使用单元格的索引\r\n    private _cellsPositions: number[] = [];                                 //所有单元格位置\r\n    private _cellsUsed: TableViewCellNode[] = [];                           //当前在表中的单元格\r\n    private _cellsFreed: TableViewCellNode[] = [];                          //未使用的单元格\r\n    private _isUsedCellsDirty: boolean = false;                             //使用的单元格是否进行排序\r\n    private _isInit: boolean = false;\r\n\r\n    private onInit() {\r\n        if (this._isInit)\r\n            return;\r\n        this._isInit = true;\r\n        this.scrollView = this.node.getComponent(cc.ScrollView);\r\n\r\n        // 获取EventHandler的回调函数\r\n        let getEventHandlerCallback = (handler: cc.Component.EventHandler) => {\r\n            let componentName = handler[\"_componentName\"];\r\n            let funcName = handler.handler;\r\n            let component = handler.target.getComponent(componentName);\r\n            return component[funcName].bind(component);\r\n        }\r\n        this.tableCellCount = getEventHandlerCallback(this.handlerCellCount);\r\n        this.tableCellSize = getEventHandlerCallback(this.handlerCellSize);\r\n        this.tableCellUpdate = getEventHandlerCallback(this.handlerCellUpdate);\r\n    }\r\n\r\n    onLoad() {\r\n        this.onInit();\r\n    }\r\n\r\n    onEnable() {\r\n        this.node.on('scrolling', this._scrollViewDidScroll, this);\r\n    }\r\n\r\n    onDisable() {\r\n        this.node.off('scrolling', this._scrollViewDidScroll, this);\r\n    }\r\n\r\n    //设置垂直填充顺序\r\n    public setVerticalFillOrder(fillOrder: VerticalFillOrder) {\r\n        this.vordering = fillOrder;\r\n    }\r\n\r\n    //设置间隔\r\n    public setInterval(midInterval: number = 0, starInterval: number = 0, endInterval: number = 0) {\r\n        this.midInterval = midInterval;\r\n        this.starInterval = starInterval;\r\n        this.endInterval = endInterval;\r\n    }\r\n\r\n    //加载数据\r\n    public reloadData(isUseLastOffset: boolean = false) {\r\n        this.onInit();\r\n        if (this.scrollView.horizontal === this.scrollView.vertical) {\r\n            cc.error(\"TableView only vertical or horizontal scrolling is supported\");\r\n            return;\r\n        }\r\n        for (let k in this._cellsUsed) {\r\n            this._cellsFreed.push(this._cellsUsed[k]);\r\n            this._cellsUsed[k].reset();\r\n            this._cellsUsed[k].active = false;\r\n        }\r\n        this._indices = [];\r\n        this._cellsUsed = [];\r\n        this._updateCellPositions();\r\n        this._updateContentSize(isUseLastOffset);\r\n        if (this.tableCellCount() > 0)\r\n            this._scrollViewDidScroll();\r\n    }\r\n\r\n    //查找索引处的单元格\r\n    public cellAtIndex(idx: number) {\r\n        if (this._indices[idx]) {\r\n            for (let k in this._cellsUsed) {\r\n                if (this._cellsUsed[k].getIdx() === idx)\r\n                    return this._cellsUsed[k];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //更新索引处的单元格\r\n    public updateCellAtIndex(idx: number) {\r\n        if (idx <= CC_INVALID_INDEX)\r\n            return;\r\n        let countOfItems = this.tableCellCount();\r\n        if (0 === countOfItems || idx > countOfItems - 1)\r\n            return;\r\n        let cell = this.cellAtIndex(idx);\r\n        if (cell)\r\n            this._moveCellOutOfSight(cell);\r\n        cell = this._createCellAtIndex(idx);\r\n        this._setIndexForCell(idx, cell);\r\n        this._addCellIfNecessary(cell);\r\n    }\r\n\r\n    //滚动到索引处的单元格\r\n    public scrollToIndex(index: number, timeInSecond: number = 0.01) {\r\n        let cellPos: number = this._cellsPositions[index];\r\n        if (!cellPos)\r\n            return;\r\n        if (this.scrollView.horizontal) {\r\n            this.scrollView.scrollToOffset(cc.v2(cellPos - this.midInterval, 0), Math.max(timeInSecond, 0.01));\r\n        } else {\r\n            if (this.vordering === VerticalFillOrder.TOP_DOWN) {\r\n                this.scrollView.scrollToOffset(cc.v2(0, cellPos - this.midInterval), Math.max(timeInSecond, 0.01));\r\n            } else {\r\n                let itemSize = this.tableCellSize(index);\r\n                this.scrollView.scrollToOffset(cc.v2(0, this.scrollView.getMaxScrollOffset().y - cellPos + this.midInterval), Math.max(timeInSecond, 0.01));\r\n            }\r\n        }\r\n    }\r\n\r\n    /** 下面是私有函数 */\r\n\r\n    //更新单元格位置\r\n    private _updateCellPositions() {\r\n        let cellsCount = this.tableCellCount();\r\n        this._cellsPositions = [];\r\n        if (cellsCount > 0) {\r\n            let currentPos = this.starInterval;\r\n            for (let i = 0; i < cellsCount; ++i) {\r\n                this._cellsPositions[i] = currentPos;\r\n                let size = this.tableCellSize(i);\r\n                if (this.scrollView.horizontal)\r\n                    currentPos += size.width;\r\n                else\r\n                    currentPos += size.height;\r\n                if (i < cellsCount - 1 && this.midInterval != 0)\r\n                    currentPos += this.midInterval;\r\n            }\r\n            currentPos += this.endInterval;\r\n            this._cellsPositions[cellsCount] = currentPos;\r\n        }\r\n    }\r\n\r\n    //更新内部容器大小\r\n    private _updateContentSize(isUseLastOffset: boolean) {\r\n        let size = this.maskNode.getContentSize();\r\n        let cellsCount = this.tableCellCount();\r\n        if (cellsCount > 0) {\r\n            let maxPosition = this._cellsPositions[cellsCount];\r\n            if (this.scrollView.horizontal && maxPosition > this.maskNode.width)\r\n                size = cc.size(maxPosition, this.maskNode.height);\r\n            else if (this.scrollView.vertical && maxPosition > this.maskNode.height)\r\n                size = cc.size(this.maskNode.width, maxPosition);\r\n        }\r\n        if (size.width != this.scrollView.content.width || size.height != this.scrollView.content.height) {\r\n            this.scrollView.content.setContentSize(size);\r\n        }\r\n        if (!isUseLastOffset) {\r\n            if (this.scrollView.horizontal)\r\n                this.scrollView.scrollToLeft(0.01);\r\n            else {\r\n                if (this.vordering === VerticalFillOrder.TOP_DOWN)\r\n                    this.scrollView.scrollToTop(0.01);\r\n                else\r\n                    this.scrollView.scrollToBottom(0.01);\r\n            }\r\n        } else {\r\n            this.scrollView.scrollToOffset(this.scrollView.getScrollOffset(), 0.01);\r\n        }\r\n    }\r\n\r\n    //索引转坐标\r\n    private _positionFromIndex(index): cc.Vec2 {\r\n        let pos = this.scrollView.horizontal ? cc.v2(this._cellsPositions[index], 0) : cc.v2(0, this._cellsPositions[index]);\r\n        let size = this.tableCellSize(index);\r\n        //转换坐标（cocos2dx的原点始终在左下角，而creator的原点是基于锚点来的）\r\n        if (this.scrollView.vertical) {\r\n            if (this.vordering === VerticalFillOrder.BOTTOM_UP)\r\n                pos.y = pos.y + size.height / 2;\r\n            else\r\n                pos.y = this.scrollView.content.height - pos.y - size.height / 2;\r\n        } else\r\n            pos.x = pos.x + size.width / 2;\r\n        if (this.scrollView.vertical) {\r\n            pos.x = this.scrollView.content.width * (0.5 - this.scrollView.content.anchorX);\r\n            pos.y = pos.y - this.scrollView.content.height * this.scrollView.content.anchorY;\r\n        } else {\r\n            pos.x = pos.x - this.scrollView.content.width * this.scrollView.content.anchorX;\r\n            pos.y = this.scrollView.content.height * (0.5 - this.scrollView.content.anchorY);\r\n        }\r\n        return pos;\r\n    }\r\n\r\n    //偏移量转索引\r\n    private _indexFromOffset(offset: cc.Vec2): number {\r\n        let maxIdx = this.tableCellCount() - 1;\r\n        let index = this.__indexFromOffset(offset);\r\n        if (index != CC_INVALID_INDEX) {\r\n            index = Math.max(0, index);\r\n            if (index > maxIdx)\r\n                index = CC_INVALID_INDEX;\r\n        }\r\n        return index;\r\n    }\r\n\r\n    //偏移量转索引的二分查找法\r\n    private __indexFromOffset(offset: cc.Vec2): number {\r\n        let low = 0;\r\n        let high = this.tableCellCount() - 1;\r\n        let search = this.scrollView.horizontal ? offset.x : offset.y;\r\n        while (high >= low) {\r\n            let index = Math.floor(low + (high - low) / 2);\r\n            let cellStart = this._cellsPositions[index];\r\n            let cellEnd = this._cellsPositions[index + 1];\r\n            if (search >= cellStart && search <= cellEnd)\r\n                return index;\r\n            else if (search < cellStart)\r\n                high = index - 1;\r\n            else\r\n                low = index + 1;\r\n        }\r\n        if (low <= 0)\r\n            return 0;\r\n        return CC_INVALID_INDEX;\r\n    }\r\n\r\n    //把单元格移除视线\r\n    private _moveCellOutOfSight(cell: TableViewCellNode) {\r\n        this._cellsFreed.push(cell);\r\n        let idx = this._cellsUsed.indexOf(cell);\r\n        if (idx != -1)\r\n            this._cellsUsed.splice(idx, 1);\r\n        this._isUsedCellsDirty = true;\r\n        this._indices[cell.getIdx()] = null;\r\n        cell.reset();\r\n        cell.active = false;\r\n    }\r\n\r\n    //设置单元格索引\r\n    private _setIndexForCell(index: number, cell: TableViewCellNode) {\r\n        cell.setAnchorPoint(0.5, 0.5);\r\n        cell.setPosition(this._positionFromIndex(index));\r\n        cell.setIdx(index);\r\n    }\r\n\r\n    //必要时添加单元格\r\n    private _addCellIfNecessary(cell: TableViewCellNode) {\r\n        if (!cell.parent)\r\n            cell.parent = this.scrollView.content;\r\n        this._cellsUsed.push(cell);\r\n        this._isUsedCellsDirty = true;\r\n        this._indices[cell.getIdx()] = true;\r\n        cell.active = true;\r\n    }\r\n\r\n    //滚动时调用计算显示位置\r\n    private _scrollViewDidScroll() {\r\n        let countOfItems = this.tableCellCount();\r\n        if (0 === countOfItems)\r\n            return;\r\n        if (this._isUsedCellsDirty) {\r\n            this._isUsedCellsDirty = false;\r\n            this._cellsUsed.sort((a: TableViewCellNode, b: TableViewCellNode) => {\r\n                return a.getIdx() - b.getIdx();\r\n            })\r\n        }\r\n\r\n        //计算在显示范围的单元格的起始 startIdx 和结束 endIdx\r\n        let startIdx = 0;\r\n        let endIdx = 0;\r\n        let maxIdx = Math.max(countOfItems - 1, 0);\r\n        let offset = this.scrollView.getScrollOffset();\r\n        offset.x *= -1\r\n\r\n        if (this.vordering === VerticalFillOrder.BOTTOM_UP)\r\n            offset.y = this.scrollView.content.height - offset.y - this.maskNode.height;\r\n        startIdx = this._indexFromOffset(offset.clone());\r\n        if (startIdx === CC_INVALID_INDEX)\r\n            startIdx = countOfItems - 1;\r\n\r\n        offset.x += this.maskNode.width;\r\n        offset.y += this.maskNode.height;\r\n\r\n        endIdx = this._indexFromOffset(offset.clone());\r\n        if (endIdx === CC_INVALID_INDEX)\r\n            endIdx = countOfItems - 1;\r\n\r\n        //移除不在 startIdx 和 endIdx 范围的 cell\r\n        if (this._cellsUsed.length > 0) {\r\n            let cell = this._cellsUsed[0];\r\n            let idx = cell.getIdx();\r\n            while (idx < startIdx) {\r\n                this._moveCellOutOfSight(cell);\r\n                if (this._cellsUsed.length > 0) {\r\n                    cell = this._cellsUsed[0];\r\n                    idx = cell.getIdx();\r\n                } else\r\n                    break;\r\n            }\r\n        }\r\n        if (this._cellsUsed.length > 0) {\r\n            let cell = this._cellsUsed[this._cellsUsed.length - 1];\r\n            let idx = cell.getIdx();\r\n            while (idx <= maxIdx && idx > endIdx) {\r\n                this._moveCellOutOfSight(cell);\r\n                if (this._cellsUsed.length > 0) {\r\n                    cell = this._cellsUsed[this._cellsUsed.length - 1];\r\n                    idx = cell.getIdx();\r\n                } else\r\n                    break\r\n            }\r\n        }\r\n\r\n        //更新未在区域显示的cell\r\n        for (let i = startIdx; i <= endIdx; ++i) {\r\n            if (!this._indices[i])\r\n                this.updateCellAtIndex(i);\r\n        }\r\n    }\r\n\r\n    //空闲的单元格离队\r\n    private _dequeueCell(): TableViewCellNode | null {\r\n        let cell: TableViewCellNode | null = null;\r\n        if (this._cellsFreed.length > 0) {\r\n            cell = this._cellsFreed.shift();\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    //创建索引处的单元格\r\n    private _createCellAtIndex(idx): TableViewCellNode {\r\n        let cell: TableViewCellNode = this._dequeueCell();\r\n        if (!cell) {\r\n            cell = new TableViewCellNode;\r\n        }\r\n        cell.setContentSize(this.tableCellSize(idx));\r\n        this.tableCellUpdate(idx, cell);\r\n        return cell;\r\n    }\r\n}\r\n"]}